1、JAVA中的几种基本类型，各占用多少字节？
    byte-->>字节数：1;位数：8; 最小值-->最大值:-128-->127
    short-->>字节数：2;位数：16; 最小值-->最大值:-32768-->32767
    integer-->>字节数：4;位数：32; 最小值-->最大值:-2147483648-->2147483647
    long-->>字节数：8;位数：64; 最小值-->最大值:-9223372036854775808-->9223372036854775807
    float-->>字节数：4;位数：32; 最小值-->最大值:1.4E-45-->3.4028235E38
    double-->>字节数：8;位数：64; 最小值-->最大值:4.9E-324-->1.7976931348623157E308
    boolean-->>字节数：1;位数：8;取值：true和false
    char-->>字节数：2;位数：Character.SIZE; 最小值-->最大值:0-->65535

2、String能被继承吗？为什么？
        不可以，因为String类有final修饰符，而final修饰的类是不能被继承的，实现细节不允许改变。
    平常我们定义的String str=”abc”(直接赋一个字面量);其实和String str=new String(“abc”)(通过构造器构造)
    还是有差异的。
    String str=“abc”和String str=new String(“abc”); 产生几个对象？
        1.前者1或0，后者2或1，先看字符串常量池，如果字符串常量池中没有，都在常量池中创建一个，如果有，前者直接引用，
            后者在堆内存中还需创建一个“abc”实例对象。
    	2.对于基础类型的变量和常量：变量和引用存储在栈中，常量存储在常量池中。
    	3.为了提升jvm（JAVA虚拟机）性能和减少内存开销，避免字符的重复创建 项目中还是不要使用
    	    new String去创建字符串，最好使用String直接赋值。

3、String， Stringbuffer， StringBuilder 的区别。
    String 字符串常量(final修饰，不可被继承)，String是常量，当创建之后即不能更改。(可以通过StringBuffer
    和StringBuilder创建String对象(常用的两个字符串操作类)。)
    ==StringBuffer 字符串变量（线程安全）,==其也是final类别的，不允许被继承，其中的绝大多数方法都进行了同步处理，
    包括常用的Append方法也做了同步处理(synchronized修饰)。其自jdk1.0起就已经出现。其toString方法会进行对象缓存，以减少元素复制开销。
    public synchronized String toString() {
    	if (toStringCache == null) {
    		toStringCache = Arrays.copyOfRange(value, 0, count);
    	}
    	return new String(toStringCache, true);
    }
    ==StringBuilder 字符串变量（非线程安全）==其自jdk1.5起开始出现。与StringBuffer一样都继承和实现了同样的接口和类，
    方法除了没使用synch修饰以外基本一致，不同之处在于最后toString的时候，会直接返回一个新对象。
    public String toString() {
    	// Create a copy, don’t share the array
    	return new String(value, 0, count);
    }

4、ArrayList 和 LinkedList 有什么区别。
    ArrayList和LinkedList都实现了List接口，有以下的不同点：
    1、ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。
        与此对应，LinkedList是以链表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，
        在这种情况下，查找某个元素的时间复杂度是O(n)。
    2、相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，
        不需要像数组那样重新计算大小或者是更新索引。
    3、LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。

5.讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当 new 的时候， 他们的执行顺序。
    此题考察的是类加载器实例化时进行的操作步骤（加载–>连接->初始化）。
    父类静态代变量、
    父类静态代码块、
    子类静态变量、
    子类静态代码块、
    父类非静态变量（父类实例成员变量）、
    父类构造函数、
    子类非静态变量（子类实例成员变量）、
    子类构造函数。
    https://blog.csdn.net/u014042066/article/details/77574956
    https://blog.csdn.net/u014042066/article/details/77394480

6、用过哪些 Map 类，都有什么区别，HashMap 是线程安全的吗,并发下使用的 Map 是什么，他们内部原理分别是什么，比如存储方式， hashcode，扩容， 默认容量等。
    hashMap是线程不安全的，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，采用哈希表来存储的，
    https://zhuanlan.zhihu.com/p/21673805
    JAVA8 的 ConcurrentHashMap 为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。

7、有没有有顺序的 Map 实现类， 如果有， 他们是怎么保证有序的。
    TreeMap和LinkedHashMap是有序的（TreeMap默认升序，LinkedHashMap则记录了插入顺序）。
    https://www.iteye.com/blog/uule-1522291

8、抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么。
    1、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。
    2、抽象类要被子类继承，接口要被类实现。
    3、接口只能做方法生明，抽象类中可以做方法生明，也可以做方法实现
    4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
    5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
    6、抽象方法只能生明，不能实现。abstract void abc();不能写成abstract void abc(){}。
    7、抽象类里可以没有抽象方法
    8、如果一个类里有抽象方法，那么这个类只能是抽象类
    9、抽象方法要被实现，所以不能是静态的，也不能是私有的。
    10、接口可继承接口，并可多继承接口，但类只能单根继承。

9、继承和聚合的区别在哪。
    继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，
    继承是类与类或者接口与接口之间最常见的关系；在Java中此类关系通过关键字extends明确标识，在设计时一般没有争议性；

    聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，
    部分可以属于多个整体对象，也可以为多个整体对象共享；比如计算机与CPU、公司与员工的关系等；表现在代码层面，和关联关系是一致的，只能从语义级别来区分；
    https://www.cnblogs.com/jiqing9006/p/5915023.html

10、讲讲你理解的 nio和 bio 的区别是啥，谈谈 reactor 模型。
    IO(BIO)是面向流的，NIO是面向缓冲区的
    BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。
    NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。
    AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。
    https://zhuanlan.zhihu.com/p/23488863
    https://www.jianshu.com/p/3f703d3d804c

11、反射的原理，反射创建类实例的三种方式是什么
    https://www.jianshu.com/p/3ea4a6b57f87?amp
    https://blog.csdn.net/yongjian1092/article/details/7364451








    

